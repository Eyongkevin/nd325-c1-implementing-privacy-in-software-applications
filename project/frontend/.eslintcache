[{"/Users/Mihir/Projects/Udacity Privacy Engineering/nd325-c1-implementing-privacy-in-software-applications/project/frontend/src/index.tsx":"1","/Users/Mihir/Projects/Udacity Privacy Engineering/nd325-c1-implementing-privacy-in-software-applications/project/frontend/src/reportWebVitals.ts":"2","/Users/Mihir/Projects/Udacity Privacy Engineering/nd325-c1-implementing-privacy-in-software-applications/project/frontend/src/App.tsx":"3","/Users/Mihir/Projects/Udacity Privacy Engineering/nd325-c1-implementing-privacy-in-software-applications/project/frontend/src/ballotForm.tsx":"4","/Users/Mihir/Projects/Udacity Privacy Engineering/nd325-c1-implementing-privacy-in-software-applications/project/frontend/src/BallotForm.tsx":"5"},{"size":500,"mtime":1609029666984,"results":"6","hashOfConfig":"7"},{"size":425,"mtime":1609029666985,"results":"8","hashOfConfig":"7"},{"size":483,"mtime":1609396788707,"results":"9","hashOfConfig":"7"},{"size":5012,"mtime":1609271024871,"results":"10","hashOfConfig":"7"},{"size":5045,"mtime":1609396788707,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1x1c4fa",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"14"},"/Users/Mihir/Projects/Udacity Privacy Engineering/nd325-c1-implementing-privacy-in-software-applications/project/frontend/src/index.tsx",[],["25","26"],"/Users/Mihir/Projects/Udacity Privacy Engineering/nd325-c1-implementing-privacy-in-software-applications/project/frontend/src/reportWebVitals.ts",[],"/Users/Mihir/Projects/Udacity Privacy Engineering/nd325-c1-implementing-privacy-in-software-applications/project/frontend/src/App.tsx",[],"/Users/Mihir/Projects/Udacity Privacy Engineering/nd325-c1-implementing-privacy-in-software-applications/project/frontend/src/ballotForm.tsx",["27"],"import React from 'react';\nimport { H5, FormGroup, InputGroup, RadioGroup, Radio, TextArea, Button, Intent, Toaster, IToaster } from \"@blueprintjs/core\";\nimport { IconNames } from \"@blueprintjs/icons\";\n\n\nexport interface ICandidate {\n  name: string\n  candidate_id: string\n}\n\n\ninterface IBallotFormState {\n  candidates: ICandidate[]\n  ballotNumber: string\n  voterNationalId: string\n  comments: string\n  selectedCandidateId: string | undefined\n}\n\nconst HOST_NAME = \"127.0.0.1:5000\";\nconst BASE_URL = \"http://\" + HOST_NAME + \"/api\";\n\nconst toaster: IToaster = Toaster.create();\n\nexport class IBallotForm extends React.PureComponent<{}, IBallotFormState> {\n\n  state: IBallotFormState = {\n    candidates: [],\n    ballotNumber: \"\",\n    voterNationalId: \"\",\n    comments: \"\",\n    selectedCandidateId: undefined\n  };\n\n  public componentDidMount() {\n    fetch(BASE_URL + \"/get_all_candidates\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            candidates: result as ICandidate[]\n          });\n        },\n      )\n  }\n\n  public render() {\n    const { ballotNumber, voterNationalId, comments, selectedCandidateId } = this.state;\n    /* TODO: \n     *  1. Somewhere in the object returned below, we should be including language about voter secrecy, and a voter's right to deregister after voting to protect their data\n     *  2. Additionally, we should be informing the voter that they shouldn't include any personally identifiable information in the \"comment\" section, as it risks compromising their voter secrecy\n     */ \n    return (\n    <>\n      <FormGroup>\n        <H5 className=\"white-text\">Enter your voter information</H5>\n        <InputGroup onChange={this.onNationalIdUpdate} value={voterNationalId} large={true} leftIcon={IconNames.PERSON} placeholder=\"Your National ID\" />\n        <br />\n        <InputGroup onChange={this.onBallotNumberUpdate} value={ballotNumber} large={true} leftIcon={IconNames.DOCUMENT} placeholder=\"Your Ballot Number\" />\n        <br />\n        <H5 className=\"white-text\">Choose a Candidate for Chancellor of the Republic</H5>\n        <RadioGroup selectedValue={this.state.selectedCandidateId} onChange={this.onCandidateSelect} inline={false}>\n          {this.state.candidates.map(candidate =>\n            <Radio key={candidate.candidate_id} label={candidate.name} value={String(candidate.candidate_id) as string} />\n          )}\n        </RadioGroup>\n        <br />\n        <H5 className=\"white-text\">Additional Voter Comments</H5>\n        <TextArea onChange={this.onCommentUpdate} growVertically={true} value={comments} fill={true} placeholder=\"Comments or concerns\" />\n      </FormGroup>\n      <Button onClick={this.onVoteSubmission} intent={Intent.PRIMARY}>Submit Vote</Button>\n    </>)\n  }\n\n  private onNationalIdUpdate = (event: React.FormEvent<HTMLInputElement>) => {\n    this.setState({\n      voterNationalId: event.currentTarget.value\n    });\n  }\n\n\n  private onBallotNumberUpdate = (event: React.FormEvent<HTMLInputElement>) => {\n    this.setState({\n      ballotNumber: event.currentTarget.value\n    });\n  }\n\n\n  private onCandidateSelect = (event: React.FormEvent<HTMLInputElement>) => {\n    this.setState({\n      selectedCandidateId: event.currentTarget.value\n    });\n  }\n\n  private onCommentUpdate = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    this.setState({\n      comments: event.currentTarget.value\n    });\n  }\n\n  private onVoteSubmission = async (event: React.MouseEvent<HTMLElement>) => {\n    const { ballotNumber, voterNationalId, comments, selectedCandidateId } = this.state;\n\n    if (ballotNumber.length === 0) {\n      toaster.show({\n        message: \"Please specify a ballot number\",\n        intent: Intent.DANGER\n      });\n      return;\n    } else if (voterNationalId.length === 0) {\n      toaster.show({\n        message: \"Please specify your National ID\",\n        intent: Intent.DANGER\n      });\n      return;\n    } else if (selectedCandidateId === undefined) {\n      toaster.show({\n        message: \"Please select a candidate\",\n        intent: Intent.DANGER\n      });\n      return;\n    }\n\n    const response = await fetch(BASE_URL + \"/count_ballot\", {\n      method: 'POST',\n      body: JSON.stringify({\n        voter_national_id: voterNationalId,\n        ballot_number: ballotNumber,\n        chosen_candidate_id: selectedCandidateId,\n        voter_comments: comments\n      }),\n      headers: {'Content-Type': 'application/json'}\n    });\n\n    // TODO: If the ballot was successfully counted, inform the user, and inform the user about deleting their voter details\n\n    /* If we got a generic bad response, show a danger toast */\n    if (!response.ok) {\n      toaster.show({\n        message: \"There was a problem casting this ballot\",\n        intent: Intent.DANGER\n      })\n    } else {\n      this.clearEnteredState();\n    }\n  }\n\n  private clearEnteredState() {\n    this.setState({\n      ballotNumber: \"\",\n      voterNationalId: \"\",\n      comments: \"\",\n      selectedCandidateId: undefined\n    })\n  }\n}\n","/Users/Mihir/Projects/Udacity Privacy Engineering/nd325-c1-implementing-privacy-in-software-applications/project/frontend/src/BallotForm.tsx",["28"],"import React from 'react';\nimport { H5, FormGroup, InputGroup, RadioGroup, Radio, TextArea, Button, Intent, Toaster, IToaster } from \"@blueprintjs/core\";\nimport { IconNames } from \"@blueprintjs/icons\";\n\n\nexport interface ICandidate {\n  name: string\n  candidate_id: string\n}\n\n\ninterface IBallotFormState {\n  candidates: ICandidate[]\n  ballotNumber: string\n  voterNationalId: string\n  comments: string\n  selectedCandidateId: string | undefined\n}\n\nconst HOST_NAME = \"127.0.0.1:5000\";\nconst BASE_URL = \"http://\" + HOST_NAME + \"/api\";\n\nconst toaster: IToaster = Toaster.create();\n\nexport class IBallotForm extends React.PureComponent<{}, IBallotFormState> {\n\n  state: IBallotFormState = {\n    candidates: [],\n    ballotNumber: \"\",\n    voterNationalId: \"\",\n    comments: \"\",\n    selectedCandidateId: undefined\n  };\n\n  public componentDidMount() {\n    fetch(BASE_URL + \"/get_all_candidates\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            candidates: result as ICandidate[]\n          });\n        },\n      )\n  }\n\n  public render() {\n    const { ballotNumber, voterNationalId, comments, selectedCandidateId } = this.state;\n    /* TODO: \n     *  1. Somewhere in the object returned below, we should be including language about voter secrecy, and a voter's right to deregister after voting to protect their data\n     *  2. Additionally, we should be informing the voter that they shouldn't include any personally identifiable information in the \"comment\" section, as it risks compromising their voter secrecy\n     */ \n    return (\n    <>\n      <FormGroup>\n        <H5 className=\"white-text\">Enter your voter information</H5>\n        <InputGroup onChange={this.onNationalIdUpdate} value={voterNationalId} large={true} leftIcon={IconNames.PERSON} placeholder=\"Your National ID\" />\n        <br />\n        <InputGroup onChange={this.onBallotNumberUpdate} value={ballotNumber} large={true} leftIcon={IconNames.DOCUMENT} placeholder=\"Your Ballot Number\" />\n        <br />\n        <H5 className=\"white-text\">Choose a Candidate for Chancellor of the Republic</H5>\n        <RadioGroup selectedValue={this.state.selectedCandidateId} onChange={this.onCandidateSelect} inline={false}>\n          {this.state.candidates.map(candidate =>\n            <Radio key={candidate.candidate_id} label={candidate.name} value={String(candidate.candidate_id) as string} />\n          )}\n        </RadioGroup>\n        <br />\n        <H5 className=\"white-text\">Additional Voter Comments</H5>\n        <TextArea onChange={this.onCommentUpdate} growVertically={true} value={comments} fill={true} placeholder=\"Comments or concerns\" />\n      </FormGroup>\n      <Button onClick={this.onVoteSubmission} intent={Intent.PRIMARY}>Submit Vote</Button>\n    </>)\n  }\n\n  private onNationalIdUpdate = (event: React.FormEvent<HTMLInputElement>) => {\n    this.setState({\n      voterNationalId: event.currentTarget.value\n    });\n  }\n\n\n  private onBallotNumberUpdate = (event: React.FormEvent<HTMLInputElement>) => {\n    this.setState({\n      ballotNumber: event.currentTarget.value\n    });\n  }\n\n\n  private onCandidateSelect = (event: React.FormEvent<HTMLInputElement>) => {\n    this.setState({\n      selectedCandidateId: event.currentTarget.value\n    });\n  }\n\n  private onCommentUpdate = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    this.setState({\n      comments: event.currentTarget.value\n    });\n  }\n\n  private onVoteSubmission = async (event: React.MouseEvent<HTMLElement>) => {\n    const { ballotNumber, voterNationalId, comments, selectedCandidateId } = this.state;\n\n    if (ballotNumber.length === 0) {\n      toaster.show({\n        message: \"Please specify a ballot number\",\n        intent: Intent.DANGER\n      });\n      return;\n    } else if (voterNationalId.length === 0) {\n      toaster.show({\n        message: \"Please specify your National ID\",\n        intent: Intent.DANGER\n      });\n      return;\n    } else if (selectedCandidateId === undefined) {\n      toaster.show({\n        message: \"Please select a candidate\",\n        intent: Intent.DANGER\n      });\n      return;\n    }\n\n    const response = await fetch(BASE_URL + \"/count_ballot\", {\n      method: 'POST',\n      body: JSON.stringify({\n        voter_national_id: voterNationalId,\n        ballot_number: ballotNumber,\n        chosen_candidate_id: selectedCandidateId,\n        voter_comments: comments\n      }),\n      headers: {'Content-Type': 'application/json'}\n    });\n\n    /* If we got a generic bad response, show a danger toast */\n    if (!response.ok) {\n      toaster.show({\n        message: \"There was a problem casting this ballot\",\n        intent: Intent.DANGER\n      })\n    } else {\n      // TODO: If the ballot was successfully counted, inform the user, and inform the user about deleting their voter details (see example immediately above)\n      this.clearEnteredState();\n    }\n  }\n\n  private clearEnteredState() {\n    this.setState({\n      ballotNumber: \"\",\n      voterNationalId: \"\",\n      comments: \"\",\n      selectedCandidateId: undefined\n    })\n  }\n}\n",{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":48,"column":54,"nodeType":"35","messageId":"36","endLine":48,"endColumn":73},{"ruleId":"33","severity":1,"message":"34","line":48,"column":54,"nodeType":"35","messageId":"36","endLine":48,"endColumn":73},"no-native-reassign",["37"],"no-negated-in-lhs",["38"],"@typescript-eslint/no-unused-vars","'selectedCandidateId' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]